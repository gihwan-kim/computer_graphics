- [강의](https://www.youtube.com/watch?v=4lmAHYSIpQ8&list=PLNfg4W25Tapx6yUnYX4a4aWJbAaDikzKo&index=4)

2 주차에서는 옛날 방식의 opengl 그리기를 배웠는데 3 주차는 최신 방법을 배울 것임


수백 수만 개의 다각형들을 그려야 하는데
이전 주차 까지 그린 방법들은 수많은 다각형을 그리기에는 좀 불편하다.


[ 2 주차 방법 ]
    while()
    {
		glBegin(GL_TRIANGLES);
		
		glColor3f(1.0f, 0.0f, 0.0f);
		glVertex3f(0.0, 0.0, 0.0);

		glColor3f(0.0f, 1.0f, 0.0f);
		glVertex3f(1.0f, 0.0, 0.0);

		glColor3f(0.0f, 0.0f, 1.0f);
		glVertex3f(1.0f, 1.0f, 0.0);
		
		glEnd();
    }



[ 최적화 1 ]
> week2 파일 참고
- 큰 다각형을 그리는데는 좋지만 수많은, 작은 다각형들을 그려야 하는 상황에서는 불편하고 느리다.
- 이유
    glVertex3f() 의 경우 파라미터를 3개나 사용하기 때문에 스택을 많이 사용한다.
    만약 점을 각각 전달하는게 아닌 배열의 형태로 사용해서 전달한다면 좀더 효율적으로 사용할 수 있다.

    Ex.
        float   first_verte∏∏x[3] = { 0.0, 0.0, 0.0 };
        glVertex3fv(first_vertex);
        -> 파라미터를 한개만 사용하기 때문에 효율적이다.




[ 최적화 2 ]
> old_style.cpp
> 최적화 1 번을 최적화하기 
- 이전 주차 코드를 보면 반복적으로 사용되는 코드가 있음을 알 수 있다.
- 이런 정보들을 통합하여 사용할 수 있지 않을까?
    Ex.
        Vec3 클래스로 만들 수 있다.
        Vec3 colors[3] = { Vec3(1.0, 0.0, 0.0),
                           Vec3(0.0, 1.0, 0.0), 
                           Vec3(0.0, 0.0, 1.0) };
        Vec3 pos[3] = { Vec3(0.0, 0.0, 0.0), 
                        Vec3(1.0f, 0.0, 0.0), 
                        Vec3(1.0f, 1.0f, 0.0) };

        하지만 Vec3 클래스의 경우 각멤버 변수들이 메모리 상에서 연속되게 붙어서 존재하고 있지 않기 때문에
        glVertex3f(colors[0].x_, colors[0].y_, colors[0].z_) 와 같은 방법으로 개별적으로 넣어 주어야 한다.
        vec3 의 멤버 변수들이 연속되게 메모리 상에서 존재하도록 하려면 union 을 사용하면 된다.
        [ union ]
        - union (공용체)
        - 서로 다른 데이터 형을 한번에 한가지만 보관할 수 있는 데이터 


    Ex.
        ```
        class Vector3
        {
        private:
            /* data */
        public:
            // 데이터가 일렬로 4바이트 씩 x, y, z 가 나열되어 있다면
            // 배열이나 struct 나 똑같은 것으로 컴퓨터는 생각할 것이기 때문에
            // union 을 사용해서 둘중 하나의 자료형으로도 표현할 수 있다.
            union
            {
                struct   {float x_, y_, z_;};
                float   v_[3];
            };
            

            // constructor
            Vector3(const float & _x,const float & _y, const float & _z)
                :   x_(_x), y_(_y), z_(_z)
            {}
            ~Vector3();
        };


        glBegin(GL_TRIANGLES);
		{
            for (int i = 0; i < 3; i++)
            {
                glColor3fv(colors[i].v_);
                glVertex3fv(colors[i].v_);
            }		
        }
        // 깔끔하게 멤버 변수인  배열 하나만 넘겨줄 수 있다.
		glEnd();
        ```




[ 최적화 3 : 제일 효율적인 방식 ]
> modern_stype.cpp
> 최적화 2 번을 최적화 하기 - array 를 사용한 modern style
- 2 번 방식으로 사용할 경우 반복문 안에서 glColor3fvm(), glVertex3fv() 함수를 여러번 호출 하기 떄문에 
  프러그래머에게만 좋지 함수를 여러번 계속 호출하기 때문에 퍼포먼스적으로 크게 향상되지는 않는다.  
=> 장점 : vertex array 를 사용해서 함수 호출 수와 정점들의 공유를 줄일 수 있다.
=> 단점 : vertex array 를 사용하는 함수들은 client 상태에 있다. 
          코드 안에서 데이터를 생성하지 않기 때문에 array 안의 데이터 들은 사용 될때마다 다시 서버로 보내야한다.

        // color array 를 사용할 수 있도록 한다.
		glEnableClientState(GL_COLOR_ARRAY);
        // vertex array 를 사용할 수 있도록 한다.
		glEnableClientState(GL_VERTEX_ARRAY);
		
        // array 들을 gpu에 한번에 보낼 수 있다.
        // void glColorPointer(GLint size, GLenum type, GLsizei stride, const void *pointer)
		glColorPointer(3, GL_FLOAT, 0, colors);
        
        // array 들을 gpu 에 한번에 보낼 수 있다.
		glVertexPointer(3, GL_FLOAT, 0, pos);

        // glDrawArrays(mode, array_frist_idx, number_of_element);
		glDrawArrays(GL_TRIANGLES, 0, 9);

		glDisableClientState(GL_COLOR_ARRAY);
		glDisableClientState(GL_VERTEX_ARRAY);

    -> 되도록이면 stride 옵션을 사용하지않도록 컴팩트하게 데이터 구조를 짜서 넣어줄것 
        (생성된 데이터가 다른 값들이 있지 말도록)
        [ stride ? ]
        - 데이터 사이에 다른 값이나 공백이 있을 경우 stride 옵션을 줘서 알려주는 것 같다.
    -> 이전에 구현한 방법보다 최신의 방법
    -> 이전의 방법은 하드코딩의 형태이거나 함수를 여러번 호출해야하는 방식 이었다면

    !!!! [ 최적화 3 ] 처럼 미리 데이터를 배열로 만들어 두어 한번에 정점들을 배열로
        처리 하도록 하는 것이 퍼포먼스적으로 더 효율적이다.
    
    !   데이터를 그저 cpu 에서 gpu 로 전달하기만 한다.
        데이터를 수정하거나 하지는 않는다.


    [ 하드코딩? ]
    - 데이터를 코드 내부에 직접 입력하는 것
    - 실행 바이너리 (exe 파일 등)에 합쳐져 있는 상태
    - 변수의 초기값, 기본값, 상수 모두 하드코딩이라 생각하면 된다.
        
    예를 들면 Pi 같이 자주 쓰이는 수학 상수들은 숫자 그대로 하드코딩하는 것이 대부분이고
    근사적 기법이 있어도 직접 계산하는 일은 거의 없다.

    [ std verctor ]
    > std_vector_case.cpp
    - 최적화 3에서 각 정점과 색깔 정보를 담기 위해서 배열을 하나 만들어서 사용해도 좋지만
      std Vector 를 사용하는것도 좋다.
    - linked list 보다는 std 의 vector 를 사용하는게 더 빠르다고 한다.
    - std::vector 를 사용해서 구현하면 더 좋다!




# [ 최적화 4 ]
> vbo_1_triangle.cpp
- 최적화 3을 보면 여전히 반복문 안에서서 vertex array 를 사용하는 함수들을 반복해서 호출하고 있는 상황이다.
    
    Ex. glEnableClientState(), glVolorPointer(), glVertexPointer() ...
    ==> geomatric data 들을 cpu 에서 gpu 로 전달하고 있음을 의미한다.
    ===> 병목현상이 발생할 수 있다.
    ====> 메모리를 gpu 에 할당한다면 해결할 수 있다.

    ## Vertex Buffer Object
        - [참고 사이트](http://www.songho.ca/opengl/gl_vbo.html#create)
        - vertex array 과 display list 의 장점들을 를 제공함으로써 OpenGL 의 성능 향상시킨다.
        
        ### GLEW 초기화순서
            - context 에 window 를 연결하나서 GLEW 초기화 코드를 넣어주기

        ### VBO 생성하기 
            - 데이터 생성해준 다음에 아래 코드를 삽입하면 된다.
            - 메모리를 생성해주고 (= glBindBuffer() 함수)
            - 미리 생성한 데이터들을 넣어 준다고 생각해주면 된다. (= glBindBuffer(), glBufferData())
            - vbo 가 포인터 역할을 한다고 생각하면 된다.
            ==> bottle neck 을 줄이기 위해서 이런 방식을 사용한다고 함.

            - glGenBuffers()
                ```
                void glGenBuffers(GLsizei n, GLuint* ids)
                ```
                > buffer objects 을 생성하고 buffer obejcts 에 대한 식별자를 리턴한다.
                GLsizei n   : 생성할 buffer obejct 개수 
                GLuint *ids : Gluint 변수 또는 ID 들을 저장할 배열
            - glBindBuffer()
                ```
                void glBindBuffer(GLenum target, GLuint id)
                ```
                > 버퍼 객체가 생성되면 버퍼 객체를 사용하기 전에 해당하는 ID 에 걸어주어야(hook) 한다.                => glBindBuffer()
                > 파라미터
                    GLenum target   : buffer object 가 vertex array data 인지 index array data 인지 (GL_ARRAY_BUFFER, or GL_ELEMENT_ARRAY_BUFFER)
                                    VBO 가 객체의 가장 효과적인 메모리 위치를 찾도록 한다.
                                        GL_ARRAY_BUFFER : 정점 좌표, 텍스쳐 좌표, 색깔 배열, 노멀
                                        GL_ELEMENT_ARRAY_BUFFER : glDraw[Range]Elements()
                    GLuint ids      : 
                > 호출하고 나서
                    VBO 는 버퍼를 0 크기의 메모리로 초기화
                    VBO 의 상태를 설정한다 (사용중, 접근 속성)

            - glBufferData()
                ```
                void glBufferData(GLenum target, GLsizei size, const void* data, GLenum usage)
                ```
                > 버퍼가 초기화 되면(= glBindBuffer() 가 호출되면) data 를 buffer object 에 복사한다.

            ```
            int num_vertices = 3;

            GLuint vbo[3];	// cpu 에서 포인터 처럼 작동한다.
                            // float *my_array[3]; 처럼 작동
            glGenBuffers(3, vbo); // vbo : gpu 메모리에서 포인터
                                    // vbo 를 통해 array 를 gpu 에 보낼 수 있다.
                                    // glGenBuffer 는 메모리를 할당해줌
                                    // 3 : 3 개짜리 배열을 생성한다는 뜻
            glBindBuffer(GL_ARRAY_BUFFER, vbo[0]);
            glBufferData(GL_ARRAY_BUFFER, sizeof(float) * num_vertices * 3, colors, GL_STATIC_DRAW);

            glBindBuffer(GL_ARRAY_BUFFER, vbo[1]);
            // 이렇게 만들어 두면 반복문 안에서 계속 전달해줄 필요 없어진다.
            glBufferData(GL_ARRAY_BUFFER, sizeof(float) * 9, vertex, GL_STATIC_DRAW);
            glBindBuffer(GL_ARRAY_BUFFER, vbo[2]);
            glBufferData(GL_ARRAY_BUFFER, sizeof(GLubyte) * 3, indices, GL_STATIC_DRAW);
            ```
        ### VBO 로 삼각형 생성하기
        > vbo_1_triangle.cpp

        ### VBO 로 한 변을 공유하는 두개의 삼각형 생성하기

            1. 공유 하는 점들을 개별적으로 인식하는 경우
                > vbo_2_triangle_6_vertices.cpp
                정점이 6개 때문에 정점 데이터를 4개만 생성해주면 된다.
                ```
                Vector3 colors[6] = {
                    Vector3(1.0, 0.0, 0.0),
                    Vector3(0.0, 1.0, 0.0),
                    Vector3(0.0, 0.0, 1.0),
                    Vector3(1.0, 0.0, 0.0),
                    Vector3(0.0, 1.0, 0.0),
                    Vector3(0.0, 0.0, 1.0)
                    };
                float vertex[6][3] = {
                    {0.0, 0.0, 0.0},
                    {0.5, 0.0, 0.0},
                    {0.25, 0.5, 0.0},
                    {0.25, 0.5, 0.0},
                    {0.5, 0.0, 0.0},
                    {0.5, 0.5, 0.0}
                    };
                ```
            2. 공유 하는 점으로 인식하는 경우
                > vbo_2_triangle_4_vertices.cpp
                정점이 4개이기 때문에 정점 데이터를 4개만 생성해주면 된다.
                ```
                Vector3 colors[4] = {
                    Vector3(1.0, 0.0, 0.0),
                    Vector3(0.0, 1.0, 0.0),
                    Vector3(0.0, 0.0, 1.0),
                    Vector3(0.0, 0.0, 1.0)
                    };
                float vertex[4][3] = {
                    {0.0, 0.0, 0.0},    // v1
                    {0.5, 0.0, 0.0},    // v0
                    {0.25, 0.5, 0.0},   // v2
                    {0.5, 0.5, 0.0}
                    };
                ```
                공유하는 점의 연결성을 알려줘야 한다.

[ 그래픽스 파이프라인 ]
    1. 사용자의 입력이 컴퓨터에 전달된다.
    2. 컴퓨터 상에서 어떤 처리를 진행한다.
        2-1. CPU <-> memory
            3D application (progarm)
            rendering   : CPU 가 GPU 에게 3d application 의 polygonal data, geomatric data 를 전달해준다.
        2-2. grapichs card : GPU <-> memory
            shader      : display 에 표현할 색깔을 결정해서 display 에 전달
    3. 결과를 디스플레이에 전달하면 출력해준다.

    > 3D application : 개발자가 만든 프로그램

[ 3 차원 ? ]
- x, y, z 
- 셰이더가 필요하다
- view projection 에서 사용된다.

    ## 직교 투영에서 gluLookAt() 함수를 사용 해서 비슷하게 구현해보자
        - glu.h 필요
        - [참고사이트](https://ko.wikibooks.org/wiki/OpenGL_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/%EC%84%A4%EC%B9%98/%EB%A7%A5)
        [ 직교 투영에서 3 차원 처럼 보이게 만들기 ]
        - void gluLookAt(GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, GLdouble centerX, GLdouble centerY, GLdouble centerZ, GLdouble upX, GLdouble upY, GLdouble upZ)
            eyeX, eyeY, eyeZ 			: 눈 (카메라) 의 위치
            centerX, centerY, centerZ	: 카메라가 바라보고 있는 점의 위치
            upX, upY, upZ				: 카메라의 회전 방향?

         warning: 'gluLookAt' is deprecated: first deprecated in macOS 10.9 - "Use GLKMatrix4MakeLookAt" [-Wdeprecated-declarations
